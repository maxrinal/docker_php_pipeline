// Uses Declarative syntax to run commands inside a container.
pipeline {
    agent {
        kubernetes {
            // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile 'jenkins-pod.yaml'
            // Or, to avoid YAML:
            // containerTemplate {
            //     name 'shell'
            //     image 'ubuntu'
            //     command 'sleep'
            //     args 'infinity'
            // }
            yaml '''
apiVersion: v1
kind: Pod
spec:
  securityContext:
    fsGroup: 1000
  containers:
  - name: shell
    image: alpine
    command:
    - sleep
    args:
    - inf

  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command:
    - /busybox/cat
    tty: true
#     volumeMounts:
#       - name: kaniko-secret
#         mountPath: /secret
#     env:
#       - name: GOOGLE_APPLICATION_CREDENTIALS
#         value: /secret/kaniko-secret.json
#   volumes:
#     - name: kaniko-secret
#       secret:
#         secretName: kaniko-secret
'''
            // Can also wrap individual steps:
            // container('shell') {
            //     sh 'hostname'
            // }
            defaultContainer 'shell'
        }
    }
    environment {
        // DOCKER_CREDENTIALS = credentials('DOCKER_HUB_CREDENTIALS')
        EXTRA_VAR = "texto"
        BUILD_NUMBER = 25
    }
    stages {
        stage('Main') {
            steps {
                sh 'pwd'
                sh 'echo ----------'
                sh 'whoami'
                sh 'echo ----------'
                sh 'ls'
                sh 'sleep 300 '
            }
        }
        stage('Build'){
            container(name: 'kaniko', shell: '/busybox/sh') {
                sh 'pwd'
                sh """
                #!/busybox/sh 
                /kaniko/executor --dockerfile Dockerfile --context `pwd`/app_files --verbosity debug --insecure --skip-tls-verify --destination gcr.io/cloudorbit/app/uat/jenkinsapp:$BUILD_NUMBER
                """
            }  
        }
    }
}
